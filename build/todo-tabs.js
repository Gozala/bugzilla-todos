/** @jsx React.DOM */
var TodoTabs = (function() {
  var baseURL = "https://bugzilla.mozilla.org";
  var bugURL = baseURL + "/show_bug.cgi?id=";
  var attachURL = baseURL + "/attachment.cgi?id=";
  var reviewURL = baseURL + "/page.cgi?id=splinter.html&bug=" // +"&attachment=" + attachId;

  var TodoTabs = React.createClass({displayName: 'TodoTabs',
    render: function() {
      return (
        React.DOM.div({id: "todo-lists", className: "tabs"}, 
          TabsNav({tabs: this.props.tabs, 
              selectedTab: this.props.selectedTab, 
              data: this.props.data, 
              onTabClick: this.handleTabClick}), 
          TabsContent({tabs: this.props.tabs, 
              selectedTab: this.props.selectedTab, 
              data: this.props.data, 
              includeBlockedBugs: this.props.includeBlockedBugs})
        )
      );
    },
    handleTabClick: function(tabId) {
      this.props.onTabSelect(tabId);
    }
  });

  var TabsNav = React.createClass({displayName: 'TabsNav',
    render: function() {
      var selectedTab = this.props.selectedTab;

      var tabNodes = this.props.tabs.map(function(item, index) {
        var list = this.props.data[item.id];

        // display a count of the items and unseen items in this list
        var count = list.items ? list.items.length : "";
        var newCount = "";
        if (list.newCount) {
          newCount = (
            React.DOM.span({className: "new-count"}, 
              " +", list.newCount
            )
          );
        }

        var className = "tab" + (selectedTab == item.id ? " tab-selected" : "");

        return (
          React.DOM.a({href: "#", className: className, title: item.alt, 
             onClick: this.onClick.bind(this, item.id)}, 
            item.name, 
            React.DOM.span({className: "count"}, 
              count
            ), 
            newCount
          )
        );
      }.bind(this));

      return (
        React.DOM.div({className: "tab-head"}, 
          tabNodes
        )
      );
    },
    onClick: function(index) {
      this.props.onTabClick(index);
    }
  });

  var TabsContent = React.createClass({displayName: 'TabsContent',
    render: function() {
      var panelNodes = this.props.tabs.map(function(tab, index) {
        var data = this.props.data[tab.id];

        var list;
        switch(tab.type) {
          case "patches":
            list = PatchList({data: data});
            break;
          case "flags":
            list = RespondList({data: data});
            break;
          case "flags+reviews":
            list = NagList({data: data});
            break;
          case "bugs":
          default:
            list = BugList({data: data, 
                      includeBlockedBugs: this.props.includeBlockedBugs});
            break;
        }

        return (
          React.DOM.div({className: 'tab-content ' + (this.props.selectedTab == tab.id ?
                          'tab-content-selected' : '')}, 
            list
          )
        );
      }.bind(this));

      return (
        React.DOM.div({className: "tab-body"}, 
          panelNodes
        )
      );
    }
  });

  var BugList = React.createClass({displayName: 'BugList',
    render: function() {
      var items = this.props.data.items;
      if (items) {
        // filter out the blocked bugs, if pref is set
        if (!this.props.includeBlockedBugs) {
          items = items.filter(function(item) {
            return !item.bug.depends_on || !item.bug.depends_on.length;
          });
        }
        var listItems = items.map(function(item) {
          return (
            ListItem({isNew: item.new}, 
              BugItem({bug: item.bug})
            )
          );
        });
      }
      return (
        List({items: items}, 
          listItems
        )
      );
    }
  });

  var NagList = React.createClass({displayName: 'NagList',
    render: function() {
      var items = this.props.data.items;
      if (items) {
        var listItems = items.map(function(item) {
          var flags = item.flags.map(function(flag) {
            return FlagItem({flag: flag});
          });
          var patches = item.attachments.map(function(patch) {
            var patchFlags = patch.flags.map(function(flag) {
              return FlagItem({flag: flag});
            });
            return (
              React.DOM.div(null, 
                PatchItem({patch: patch}), 
                patchFlags
              )
            );
          });
          var requests = patches.concat(flags);

          return (
            ListItem({isNew: item.new}, 
              BugItem({bug: item.bug}), 
              React.DOM.div(null, 
                requests
              )
            )
          );
        });
      }
      return (
        List({items: items}, 
          listItems
        )
      );
    }
  });

  var RespondList = React.createClass({displayName: 'RespondList',
    render: function() {
      var items = this.props.data.items;
      if (items) {
        var listItems = items.map(function(item) {
          var flags = item.bug.flags.map(function(flag) {
            return FlagItem({flag: flag});
          });
          return (
            ListItem({isNew: item.new}, 
              BugItem({bug: item.bug}), 
              React.DOM.div(null, 
                flags
              )
            )
          );
        });
      }
      return (
        List({items: items}, 
          listItems
        )
      );
    }
  });

  var PatchList = React.createClass({displayName: 'PatchList',
    render: function() {
      var items = this.props.data.items;
      if (items) {
        var listItems = items.map(function(item) {
          var patches = item.attachments.map(function(patch) {
             return PatchItem({patch: patch});
          });
          return (
            ListItem({isNew: item.new}, 
              BugItem({bug: item.bug}), 
              React.DOM.div(null, 
                patches
              )
            )
          );
        });
      }
      return (
        List({items: items}, 
          listItems
        )
      );
    }
  });

  var List = React.createClass({displayName: 'List',
    render: function() {
      if (!this.props.items) {
        return WaitingList(null);
      }
      if (this.props.items.length == 0) {
        return EmptyList(null);
      }
      return (
        React.DOM.div(null, 
          this.props.children
        )
      );
    }
  })

  var WaitingList = React.createClass({displayName: 'WaitingList',
    render: function() {
      return (
        React.DOM.div({className: "list-item"}, 
          React.DOM.img({src: "lib/indicator.gif", className: "spinner"})
        )
      );
    }
  })

  var EmptyList = React.createClass({displayName: 'EmptyList',
    render: function() {
      return (
        React.DOM.div({className: "list-item empty-message"}, 
          "No items to display"
        )
      );
    }
  })

  var PatchItem = React.createClass({displayName: 'PatchItem',
    render: function() {
      var patch = this.props.patch;
      var size = Math.round(patch.size / 1000) + "KB";
      return (
        React.DOM.div(null, 
          React.DOM.a({className: "att-link", href: attachURL + patch.id, target: "_blank", 
             title: patch.description + " - " + size}, 
             "patch by ", patch.attacher.name
          ), 
          React.DOM.span({className: "att-suffix"}, 
            React.DOM.span({className: "att-date timeago", title: patch.last_change_time}, 
              patch.last_change_time
            )
          )
        )
      );
    }
  });

  var FlagItem = React.createClass({displayName: 'FlagItem',
    render: function() {
      var flag = this.props.flag;
      return (
        React.DOM.div({className: "flag"}, 
          React.DOM.span({className: "flag-name"}, 
            flag.name
          ), 
          React.DOM.span({className: "flag-status"}, 
            flag.status, "  "
          ), 
          React.DOM.span({className: "flag-requestee"}, 
            flag.requestee
          )
        )
      );
    }
  });

  var BugItem = React.createClass({displayName: 'BugItem',
    render: function() {
      var bug = this.props.bug;
      return (
        React.DOM.div({className: "bug"}, 
          React.DOM.a({className: "bug-link", href: bugURL + bug.id, 
             target: "_blank", title: bug.status + " - " + bug.summary}, 
            React.DOM.span({className: "bug-id"}, 
              bug.id
            ), 
            "- ", 
            React.DOM.span({className: "full-bug bug-summary"}, 
              bug.summary
            )
          ), 
          React.DOM.span({className: "item-date timeago", 
                title: bug.last_change_time}, 
            bug.last_change_time
          )
        )
      );
    }
  });

  var ListItem = React.createClass({displayName: 'ListItem',
    render: function() {
      return (
        React.DOM.div({className: "list-item " + (this.props.isNew ? "new-item" : "")}, 
          this.props.children
        )
      );
    }
  });

  return TodoTabs;
})();
//# sourceMappingURL=data:application/json;base64,